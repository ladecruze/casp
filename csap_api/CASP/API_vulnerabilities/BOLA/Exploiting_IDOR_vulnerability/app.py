import os, psycopg2, json
import flask
from flask import jsonify, request
from werkzeug.routing import BaseConverter
from CASP import app
from flask_mongoengine import MongoEngine
#from flask_pymongo import PyMongo
import pymongo
import json
from bson import ObjectId


class RegexConverter(BaseConverter):
    def __init__(self, url_map, *items):
        super(RegexConverter, self).__init__(url_map)
        self.regex = items[0]

def getConnection():
    conn = psycopg2.connect(host='localhost',
                            database='casp',
                            user=os.environ['DB_USERNAME'],
                            password=os.environ['DB_PASSWORD'])
    return conn
    
class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)

'''
db = myclient["casp"]
dbcoll = db["collection"]
item_1 = {"id" : "1","item_name" : "Egg","category" : "food","quantity" : 12,"price" : 5,"item_description" : "brown country eggs"}
item_2 = {"id" : "2","item_name" : "Tomato","category" : "food","quantity" : 10,"price" : 36,"item_description" : "European tomatoes"}
dbcoll.insert_many([item_1,item_2])

class User(db.Document):
    name = db.StringField()
    email = db.StringField()
'''

app.url_map.converters['regex'] = RegexConverter

# Get a user details
@app.route('/api/v1/users/<regex("[0-9]"):userId>')
def process_user(userId):
    """Get a particular user information
    ---
    tags:
        - version 1.0
    produces:
    - "application/json"
    responses:
      200:
        description: "Success"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """  
    authorization = request.headers.get('Authorization')
    conn = getConnection()
    cur = conn.cursor()
    cur.execute(f'SELECT * FROM users where id={userId};')
    user = cur.fetchall()
    cur.close()
    conn.close()
    try:
        if(user[0][5] == authorization):
            userData = {}
            userData["name"] = user[0][1]
            userData["email"] = user[0][2]
            userData["role"] = user[0][4]
            userData["key"] = user[0][5]
        else:
            return flask.abort(403)
    except IndexError:
        userData = {'Error':'User not found'}
    return jsonify(userData)

# Get all user details
@app.route('/api/v1/users')
def allUsers():
    """Returns all users information
    ---
    tags:
        - version 1.0
    produces:
    - "application/json"
    responses:
      200:
        description: "users list"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """  
    authorization = request.headers.get('authorization')
    conn = getConnection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM users;')
    user = cur.fetchall();
    print(user[0][5])
    print(authorization)
    if(user[0][5] == authorization):
        cur.execute('SELECT * FROM users;')
    else:
        return flask.abort(403)
    users = cur.fetchall()
    cur.close()
    conn.close()
    responseData = []
    try:
        for i in range(len(users)):
            data = {}
            data["id"] = users[i][0]
            data["name"] = users[i][1]
            data["email"] = users[i][2]
            data["role"] = users[i][4]
            responseData.append(data)
    except IndexError:
            responseData["Error"] = "User not found"
    return jsonify(responseData)

# Delete user [IDOR where low level user can delete admin]
@app.route('/api/v1/users/<regex("[0-9]"):userId>/delete', methods=["DELETE"])
def removeuser(userId):
    """Delete a particular user
    ---
    tags:
        - version 1.0
    produces:
    - "application/json"
    responses:
      200:
        description: "User has been deleted"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """  
    conn = getConnection()
    cur = conn.cursor()
    cur.execute(f'DELETE FROM users WHERE id ={userId}')
    cur.execute(f'SELECT * FROM users;')
    user = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()
    return jsonify(Message="User has been deleted.")

#comments
@app.route('/api/comments/add', methods=["POST","PUT"])
def add_comment():
    app.logger.debug('Headers: %s', request.headers)
    app.logger.debug('Body: %s', request.get_data())
    """Add comment
    ---
    tags:
        - comments
    produces:
    - "application/json"
    requestBody:
      required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
    parameters:
        - in: body
          name: comment
          schema:
            type: string
          required: true
          description: Comment ID of the comment
    responses:
      200:
        description: "Comment added"
      400:
        description: "URI is not valid"
      404:
        description: "Requested URL not found"
    """
    comment = request.form.get('comment')
    total_comments = len([comment_1 for comment_1 in comments.find()])+1
    comments.insert_one({"id":total_comments,"comment":comment,"user":"guest"})
    return jsonify(comment=comment)

@app.route('/api/comments/<regex("[0-9]"):id>', methods=["POST","PUT"])
def update_comment(id):
    """Update a particular comment
    ---
    tags:
        - comments
    responses:
      200:
        description: "User has been deleted"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """
    get_comment = request.form.get('comment')
    new_comment = {"$set": { "comment": get_comment } }
    comment = comments.update_one({"id":int(id)},new_comment)
    return jsonify(message="Comment has been updated.")

@app.route('/api/comments/', methods=["GET"])
def comments():
    """Get all comments
    ---
    tags:
        - comments
    produces:
    - "application/json"
    responses:
      200:
        description: "Success"
      400:
        description: "Invalid ID supplied"
      404:
        description: "URL not found"
    """
    #x = dbcoll.find_one()
    all_comments = comments.find({},{"_id":0})
    return JSONEncoder().encode([comment_1 for comment_1 in all_comments])

@app.route('/api/comments/<regex("[0-9]"):id>', methods=["GET"])
def get_comment(id):
    """Read a particular comment
    ---
    tags:
        - comments
    parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Comment ID of the comment
    produces:
    - "application/json"
    responses:
      200:
        description: "Success"
      400:
        description: "Invalid ID supplied"
      404:
        description: "URL not found"
    """  
    comment = comments.find_one({"id":int(id)},{"_id":0})
    return JSONEncoder().encode(comment)

@app.route('/api/comments/<regex("[0-9]"):id>/delete', methods=["DELETE"])
def remove_comment(id):
    """Delete a particular comment
    ---
    tags:
        - comments
    produces:
    - "application/json"
    responses:
      200:
        description: "User has been deleted"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """  
    comments.delete_one({"id":int(id)})
    return jsonify(comment="Comment has been deleted.")

@app.route('/api/comments/delete', methods=['DELETE'])
def delete_comment():
    """Delete a particular comment [old]
    ---
    tags:
        - comments
    produces:
    - "application/json"
    responses:
      200:
        description: "User has been deleted"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """
    id = request.args.get('id')        
    comments.delete_one({"id":int(id)})
    return jsonify(comment="Comment has been deleted.")


#Sensitive information leakage - SQL Query leakage using Index Out of Range
@app.route('/api/v1/products/add', methods=["POST"])
def new_product():
    """Add new product
    ---
    tags:
        - version 1.0
    produces:
    - "application/json"
    responses:
      200:
        description: "list of tasks"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """ 
    id = request.args.get('product_id')
    name = request.args.get('product_name')
    price = request.args.get('price')
    conn = getConnection()
    cur = conn.cursor()
    cur.execute('INSERT INTO products (product_name, price) VALUES (%s, %s, %s)',(id,name))
    cur.close()
    conn.close()
    return 'Product added'


@app.route('/api/v1/products/<regex("[0-9]"):id>', methods=['GET'])
def get_product():
    """Get a product information
    ---
    tags:
        - version 1.0
    produces:
    - "application/json"
    responses:
      200:
        description: "success"
      400:
        description: "Invalid ID supplied"
      404:
        description: "todo item not found"
    """ 
    for i in dbcoll.find():
        print(i)
    items = dbcoll.find_one()
    return items

myclient = pymongo.MongoClient("mongodb://casp-mongodb-1/casp")

db = myclient["casp"]
comments = db["comments"]
comments.delete_many({})
s = db.command("collstats", "comments")
total_comments = [comment_1 for comment_1 in comments.find()]
print(total_comments)
comment_one = {"id": 1,"comment":"I love PDSO","user":"guest"}
comments.insert_one(comment_one)
